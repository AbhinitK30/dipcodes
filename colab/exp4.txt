Exp No.4:

a.)
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
# Upload multiple images
print("Please upload 4 images")
uploaded = files.upload()
# Process each uploaded image
for image_name in uploaded.keys():
  # Read the uploaded image in grayscale
  image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
  # Compute histogram
  hist = cv2.calcHist([image], [0], None, [256], [0, 256])
  # Compute brightness and contrast
  brightness = np.mean(image)
  contrast = image.std()
  # Classification
  if brightness < 85:
    category = "Dark Image"
  elif brightness > 170:
    category = "Light Image"
  elif contrast < 40:
    category = "Low Contrast Image"
  else:
    category = "High Contrast Image"
  # Display results
  plt.figure(figsize=(12, 5))
  plt.subplot(1, 2, 1)
  plt.imshow(image, cmap='gray')
  plt.title(f"Grayscale Image: {image_name}")
  plt.axis("off")
  plt.subplot(1, 2, 2)
  plt.plot(hist, color='black')
  plt.title("Histogram")
  plt.xlabel("Pixel Value")
  plt.ylabel("Frequency")
  plt.show()
  print(f"Image: {image_name}")
  print(f"Brightness: {brightness:.2f}")
  print(f"Contrast: {contrast:.2f}")
  print(f"Image Classification: {category}\n")

// w/o inbuilt function

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

# Upload multiple images
print("Please upload 4 images")
uploaded = files.upload()

# Process each uploaded image
for image_name in uploaded.keys():
    # Read the uploaded image in grayscale
    image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)

    # Manually compute histogram
    hist = np.zeros(256, dtype=int)
    for pixel in image.flatten():
        hist[pixel] += 1

    # Compute brightness and contrast
    brightness = np.mean(image)
    contrast = image.std()

    # Classification
    if brightness < 85:
        category = "Dark Image"
    elif brightness > 170:
        category = "Light Image"
    elif contrast < 40:
        category = "Low Contrast Image"
    else:
        category = "High Contrast Image"

    # Display results
    plt.figure(figsize=(12, 5))

    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title(f"Grayscale Image: {image_name}")
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.plot(hist, color='black')
    plt.title("Histogram (Manual Calculation)")
    plt.xlabel("Pixel Value")
    plt.ylabel("Frequency")
    plt.grid(True)

    plt.show()

    print(f"Image: {image_name}")
    print(f"Brightness: {brightness:.2f}")
    print(f"Contrast: {contrast:.2f}")
    print(f"Image Classification: {category}\n")

b.)
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
# Upload a low contrast image
print("Upload a low contrast image")
uploaded = files.upload()
# Read the uploaded image in grayscale
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
# Compute histogram before equalization
hist_before = cv2.calcHist([image], [0], None, [256], [0, 256])
# Apply Histogram Equalization
equalized_image = cv2.equalizeHist(image)
# Compute histogram after equalization
hist_after = cv2.calcHist([equalized_image], [0], None, [256], [0, 256])
# Plot the results
plt.figure(figsize=(12, 8))
# Original Image and Histogram
plt.subplot(2, 2, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Low Contrast Image")
plt.axis("off")
plt.subplot(2, 2, 2)
plt.plot(hist_before, color='black')
plt.title("Histogram Before Equalization")
plt.xlabel("Pixel Value")
plt.ylabel("Frequency")
# Equalized Image and Histogram
plt.subplot(2, 2, 3)
plt.imshow(equalized_image, cmap='gray')
plt.title("Equalized Image (Enhanced Contrast)")
plt.axis("off")
plt.subplot(2, 2, 4)
plt.plot(hist_after, color='black')
plt.title("Histogram After Equalization")
plt.xlabel("Pixel Value")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

// w/o inbuilt function

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

# Upload a low contrast image
print("Upload a low contrast image")
uploaded = files.upload()

# Read the uploaded image in grayscale
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)

# Manually compute histogram before equalization
hist_before = np.zeros(256, dtype=int)
for pixel in image.flatten():
    hist_before[pixel] += 1

# Histogram Equalization (Manual)
# Step 1: Compute PDF
pdf = hist_before / image.size

# Step 2: Compute CDF
cdf = np.cumsum(pdf)
cdf_normalized = (cdf * 255).astype('uint8')  # Mapping values to 0-255

# Step 3: Map original pixels using CDF
equalized_image = cdf_normalized[image]

# Manually compute histogram after equalization
hist_after = np.zeros(256, dtype=int)
for pixel in equalized_image.flatten():
    hist_after[pixel] += 1

# Plot the results
plt.figure(figsize=(12, 8))

# Original Image and Histogram
plt.subplot(2, 2, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Low Contrast Image")
plt.axis("off")

plt.subplot(2, 2, 2)
plt.plot(hist_before, color='black')
plt.title("Histogram Before Equalization")
plt.xlabel("Pixel Value")
plt.ylabel("Frequency")

# Equalized Image and Histogram
plt.subplot(2, 2, 3)
plt.imshow(equalized_image, cmap='gray')
plt.title("Equalized Image (Enhanced Contrast)")
plt.axis("off")

plt.subplot(2, 2, 4)
plt.plot(hist_after, color='black')
plt.title("Histogram After Equalization")
plt.xlabel("Pixel Value")
plt.ylabel("Frequency")

plt.tight_layout()
plt.show()