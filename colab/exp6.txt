Exp No.6:

a.)
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
print("Upload a grayscale image")
uploaded = files.upload()
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
laplacian_kernel = np.array([[-1, -1, -1],
[-1, 8, -1],
[-1, -1, -1]], dtype=np.float32)

# Apply the Laplacian filter using convolution
point_detected = cv2.filter2D(image, -1, laplacian_kernel)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.xlabel("Width")
plt.ylabel("Height")
plt.subplot(1, 2, 2)
plt.imshow(point_detected, cmap='gray')
plt.title("Point Detected Image (Laplacian Filter)")
plt.xlabel("Width")
plt.ylabel("Height")
plt.tight_layout()
plt.show()

// w/o inbuilt function

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

print("Upload a grayscale image")
uploaded = files.upload()
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)

laplacian_kernel = np.array([
    [-1, -1, -1],
    [-1,  8, -1],
    [-1, -1, -1]
], dtype=np.float32)

# Pad the image to handle borders
padded_image = np.pad(image, ((1, 1), (1, 1)), mode='constant', constant_values=0)
output = np.zeros_like(image, dtype=np.float32)

# Manual convolution
for i in range(image.shape[0]):
    for j in range(image.shape[1]):
        region = padded_image[i:i+3, j:j+3]
        value = np.sum(region * laplacian_kernel)
        output[i, j] = value

# Normalize the output to 0–255 and convert to uint8
output = np.clip(output, 0, 255).astype(np.uint8)

# Display the result
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.xlabel("Width")
plt.ylabel("Height")
plt.subplot(1, 2, 2)
plt.imshow(output, cmap='gray')
plt.title("Point Detected Image (Laplacian Filter)")
plt.xlabel("Width")
plt.ylabel("Height")

b.)
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
print("Upload a grayscale image")
uploaded = files.upload()
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
vertical_kernel = np.array([[-1, 2, -1],
[-1, 2, -1],
[-1, 2, -1]], dtype=np.float32)

horizontal_kernel = np.array([[-1, -1, -1],
[2, 2, 2],
[-1, -1, -1]], dtype=np.float32)

diag_45_kernel = np.array([[-1, -1, 2],
[-1, 2, -1],
[ 2, -1, -1]], dtype=np.float32)

diag_minus_45_kernel = np.array([[ 2, -1, -1],
[-1, 2, -1],
[-1, -1, 2]], dtype=np.float32)

# Apply the kernels using convolution
vertical_lines = cv2.filter2D(image, -1, vertical_kernel)
horizontal_lines = cv2.filter2D(image, -1, horizontal_kernel)
diag_45_lines = cv2.filter2D(image, -1, diag_45_kernel)
diag_minus_45_lines = cv2.filter2D(image, -1, diag_minus_45_kernel)
plt.figure(figsize=(12, 8))
plt.subplot(2, 3, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis("off")
plt.subplot(2, 3, 2)
plt.imshow(vertical_lines, cmap='gray')
plt.title("Vertical Line Detection")
plt.axis("off")
plt.subplot(2, 3, 3)
plt.imshow(horizontal_lines, cmap='gray')
plt.title("Horizontal Line Detection")
plt.axis("off")
plt.subplot(2, 3, 4)
plt.imshow(diag_45_lines, cmap='gray')
plt.title("Diagonal 45° Line Detection")
plt.axis("off")
plt.subplot(2, 3, 5)
plt.imshow(diag_minus_45_lines, cmap='gray')
plt.title("Diagonal -45° Line Detection")
plt.axis("off")
plt.tight_layout()
plt.show()

// w/o inbuilt function

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

print("Upload a grayscale image")
uploaded = files.upload()
image_name = list(uploaded.keys())[0]  # Fixed typo: 'image name' -> 'image_name'
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)

# Define kernels
vertical_kernel = np.array([[-1, 2, -1],
                            [-1, 2, -1],
                            [-1, 2, -1]], dtype=np.float32)

horizontal_kernel = np.array([[-1, -1, -1],
                              [ 2,  2,  2],
                              [-1, -1, -1]], dtype=np.float32)

diag_45_kernel = np.array([[-1, -1,  2],
                           [-1,  2, -1],
                           [ 2, -1, -1]], dtype=np.float32)

diag_minus_45_kernel = np.array([[ 2, -1, -1],
                                 [-1,  2, -1],
                                 [-1, -1,  2]], dtype=np.float32)

# Manual convolution function
def apply_custom_filter(img, kernel):
    padded = np.pad(img, ((1, 1), (1, 1)), mode='constant', constant_values=0)
    output = np.zeros_like(img, dtype=np.float32)

    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            region = padded[i:i+3, j:j+3]
            output[i, j] = np.sum(region * kernel)

    output = np.clip(output, 0, 255).astype(np.uint8)
    return output

# Apply filters manually
vertical_lines = apply_custom_filter(image, vertical_kernel)
horizontal_lines = apply_custom_filter(image, horizontal_kernel)
diag_45_lines = apply_custom_filter(image, diag_45_kernel)
diag_minus_45_lines = apply_custom_filter(image, diag_minus_45_kernel)

# Display results
plt.figure(figsize=(12, 8))
plt.subplot(2, 3, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis("off")
plt.subplot(2, 3, 2)
plt.imshow(vertical_lines, cmap='gray')
plt.title("Vertical Line Detection")
plt.axis("off")
plt.subplot(2, 3, 3)
plt.imshow(horizontal_lines, cmap='gray')
plt.title("Horizontal Line Detection")
plt.axis("off")
plt.subplot(2, 3, 4)
plt.imshow(diag_45_lines, cmap='gray')
plt.title("Diagonal 45° Line Detection")
plt.axis("off")
plt.subplot(2, 3, 5)
plt.imshow(diag_minus_45_lines, cmap='gray')
plt.title("Diagonal -45° Line Detection")
plt.axis("off")
plt.tight_layout()
plt.show()

c.)
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
print("Upload a grayscale image")
uploaded = files.upload()
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
T = np.mean(image)
delta_T = 1
max_iterations = 100
iteration = 0
while True:
  G1 = image[image > T]
  G2 = image[image <= T]
  m1 = np.mean(G1) if len(G1) > 0 else 0
  m2 = np.mean(G2) if len(G2) > 0 else 0
  new_T = (m1 + m2) / 2
  if abs(new_T - T) < delta_T or iteration >= max_iterations:
    break
  T = new_T
  iteration += 1
_, thresholded_image = cv2.threshold(image, int(T), 255, cv2.THRESH_BINARY)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis("off")
plt.subplot(1, 2, 2)
plt.imshow(thresholded_image, cmap='gray')
plt.title(f"Thresholded Image (T = {int(T)})")
plt.axis("off")
plt.tight_layout()
plt.show()
print(f"Final Threshold Value: {int(T)}")
